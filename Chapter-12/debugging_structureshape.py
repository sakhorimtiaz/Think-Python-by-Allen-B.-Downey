#this code is generated by AI
def simple_structshape(ds):
    """Returns a simple string that describes the type and size of a data structure.

    ds: any Python object

    Returns: string
    """
    typename = type(ds).__name__

    # Handle basic sequences: list, tuple, set
    if isinstance(ds, (list, tuple, set)):
        size = len(ds)
        return f"{typename} of size {size}"

    # Handle dictionary
    elif isinstance(ds, dict):
        size = len(ds)
        return f"dict of size {size} with keys of type {type(list(ds.keys())[0]).__name__}"

    # Handle other types
    else:
        return typename

if __name__ == '__main__':
    # Examples to demonstrate the function

    # Example 1: Simple list
    t = [1, 2, 3]
    print(simple_structshape(t))  # Output: list of size 3

    # Example 2: Nested list
    t2 = [[1, 2], [3, 4], [5, 6]]
    print(simple_structshape(t2))  # Output: list of size 3

    # Example 3: Mixed types in a list
    t3 = [1, 2, 3, 4.0, '5', '6', [7], [8], 9]
    print(simple_structshape(t3))  # Output: list of size 9

    # Example 4: Custom object in a list
    class Point:
        """trivial object type"""
    
    t4 = [Point(), Point()]
    print(simple_structshape(t4))  # Output: list of size 2

    # Example 5: Set
    s = set('abc')
    print(simple_structshape(s))  # Output: set of size 3

    # Example 6: Dictionary
    d = {'a': 1, 'b': 2}
    print(simple_structshape(d))  # Output: dict of size 2 with keys of type str

    # Example 7: Iterator
    it = iter('abc')
    print(simple_structshape(it))  # Output: str_iterator
